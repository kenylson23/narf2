# üöÄ Script de Setup - Col√©gio Narfive (PowerShell)
# Este script configura o projeto para produ√ß√£o local no Windows

Write-Host "üéì Configurando Col√©gio Narfive para produ√ß√£o local..." -ForegroundColor Blue

# Fun√ß√£o para imprimir mensagens coloridas
function Write-Status {
    param([string]$Message)
    Write-Host "[INFO] $Message" -ForegroundColor Blue
}

function Write-Success {
    param([string]$Message)
    Write-Host "[SUCCESS] $Message" -ForegroundColor Green
}

function Write-Warning {
    param([string]$Message)
    Write-Host "[WARNING] $Message" -ForegroundColor Yellow
}

function Write-Error {
    param([string]$Message)
    Write-Host "[ERROR] $Message" -ForegroundColor Red
}

# Verificar se Node.js est√° instalado
Write-Status "Verificando Node.js..."
try {
    $nodeVersion = node --version
    Write-Success "Node.js $nodeVersion detectado"
} catch {
    Write-Error "Node.js n√£o est√° instalado. Por favor, instale Node.js 18+ primeiro."
    exit 1
}

# Verificar se npm est√° instalado
Write-Status "Verificando npm..."
try {
    $npmVersion = npm --version
    Write-Success "npm $npmVersion detectado"
} catch {
    Write-Error "npm n√£o est√° instalado."
    exit 1
}

# Instalar depend√™ncias
Write-Status "Instalando depend√™ncias..."
npm install

if ($LASTEXITCODE -eq 0) {
    Write-Success "Depend√™ncias instaladas com sucesso"
} else {
    Write-Error "Erro ao instalar depend√™ncias"
    exit 1
}

# Criar diret√≥rio de logs
Write-Status "Criando diret√≥rio de logs..."
if (!(Test-Path "logs")) {
    New-Item -ItemType Directory -Path "logs"
}

# Verificar se arquivo .env existe
if (!(Test-Path ".env")) {
    Write-Warning "Arquivo .env n√£o encontrado. Criando exemplo..."
    @"
# Configura√ß√µes do Banco de Dados
DATABASE_URL="postgresql://username:password@localhost:5432/narfive_db"

# Configura√ß√µes do Servidor
PORT=8080
NODE_ENV=development

# Configura√ß√µes de Sess√£o (para produ√ß√£o, use uma chave secreta forte)
SESSION_SECRET="your-session-secret-key"

# Configura√ß√µes de Autentica√ß√£o (opcional)
JWT_SECRET="your-jwt-secret-key"
"@ | Out-File -FilePath ".env" -Encoding UTF8
    Write-Warning "Arquivo .env criado. Por favor, configure as vari√°veis de ambiente."
} else {
    Write-Success "Arquivo .env encontrado"
}

# Verificar TypeScript
Write-Status "Verificando TypeScript..."
npm run type-check

if ($LASTEXITCODE -eq 0) {
    Write-Success "TypeScript configurado corretamente"
} else {
    Write-Warning "Alguns erros de TypeScript encontrados. Verifique o c√≥digo."
}

# Build de teste
Write-Status "Testando build..."
npm run build

if ($LASTEXITCODE -eq 0) {
    Write-Success "Build realizado com sucesso"
} else {
    Write-Error "Erro no build. Verifique os logs acima."
    exit 1
}

# Verificar se PM2 est√° instalado
Write-Status "Verificando PM2..."
try {
    $pm2Version = pm2 --version
    Write-Success "PM2 j√° est√° instalado"
} catch {
    Write-Warning "PM2 n√£o est√° instalado. Instalando..."
    npm install -g pm2
    if ($LASTEXITCODE -eq 0) {
        Write-Success "PM2 instalado com sucesso"
    } else {
        Write-Warning "Erro ao instalar PM2. Voc√™ pode instal√°-lo manualmente com: npm install -g pm2"
    }
}

# Criar script de inicializa√ß√£o (PowerShell)
Write-Status "Criando script de inicializa√ß√£o..."
@"
# Script de inicializa√ß√£o do Col√©gio Narfive (PowerShell)

Write-Host "üéì Iniciando Col√©gio Narfive..." -ForegroundColor Green

# Verificar se .env existe
if (!(Test-Path ".env")) {
    Write-Host "‚ùå Arquivo .env n√£o encontrado. Execute setup.ps1 primeiro." -ForegroundColor Red
    exit 1
}

# Verificar se build existe
if (!(Test-Path "dist/index.js")) {
    Write-Host "üî® Realizando build..." -ForegroundColor Yellow
    npm run build
}

# Verificar se PM2 est√° dispon√≠vel
try {
    pm2 --version | Out-Null
    Write-Host "üöÄ Iniciando com PM2..." -ForegroundColor Green
    pm2 start ecosystem.config.js --env production
    Write-Host "‚úÖ Aplica√ß√£o iniciada com PM2" -ForegroundColor Green
    Write-Host "üìä Para ver logs: pm2 logs narfive-app" -ForegroundColor Cyan
    Write-Host "üõë Para parar: pm2 stop narfive-app" -ForegroundColor Cyan
} catch {
    Write-Host "üöÄ Iniciando com Node.js..." -ForegroundColor Green
    npm run start
}
"@ | Out-File -FilePath "start.ps1" -Encoding UTF8

# Criar script de parada
@"
Write-Host "üõë Parando Col√©gio Narfive..." -ForegroundColor Yellow

try {
    pm2 stop narfive-app
    Write-Host "‚úÖ Aplica√ß√£o parada" -ForegroundColor Green
} catch {
    Write-Host "‚ùå PM2 n√£o encontrado. Pare o processo manualmente." -ForegroundColor Red
}
"@ | Out-File -FilePath "stop.ps1" -Encoding UTF8

# Criar script de restart
@"
Write-Host "üîÑ Reiniciando Col√©gio Narfive..." -ForegroundColor Yellow

try {
    pm2 restart narfive-app
    Write-Host "‚úÖ Aplica√ß√£o reiniciada" -ForegroundColor Green
} catch {
    Write-Host "‚ùå PM2 n√£o encontrado. Reinicie manualmente." -ForegroundColor Red
}
"@ | Out-File -FilePath "restart.ps1" -Encoding UTF8

Write-Success "‚úÖ Setup conclu√≠do com sucesso!"

Write-Host ""
Write-Host "üéØ Pr√≥ximos passos:" -ForegroundColor Cyan
Write-Host "1. Configure o arquivo .env com suas vari√°veis de ambiente"
Write-Host "2. Configure o banco de dados PostgreSQL"
Write-Host "3. Execute: .\start.ps1 para iniciar a aplica√ß√£o"
Write-Host "4. Acesse: http://localhost:8080"
Write-Host ""
Write-Host "üìö Documenta√ß√£o completa: production-setup.md"
Write-Host ""
Write-Host "üõ†Ô∏è  Scripts dispon√≠veis:" -ForegroundColor Cyan
Write-Host "  .\start.ps1     - Iniciar aplica√ß√£o"
Write-Host "  .\stop.ps1      - Parar aplica√ß√£o"
Write-Host "  .\restart.ps1   - Reiniciar aplica√ß√£o"
Write-Host "  npm run dev     - Modo desenvolvimento"
Write-Host "  npm run build   - Build para produ√ß√£o" 